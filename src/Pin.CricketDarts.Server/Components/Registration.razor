
<div class="row row-cols-1 row-cols-md-2 row-cols-lg-5 g-1 mx-auto d-flex justify-content-center">
    <div class="card shadow mb-5 align-items-center bg-dark w-50 p-5">
        <div class="text-light d-inline-block">
            <div hidden="@TournamentLoaded">No tournament set yet. Please go to the games page first to create a tournament.</div>
            <div hidden="@(!TournamentLoaded)">
                <div hidden="@(!TournamentIsFull)">The current tournament is full. No more registrations allowed!</div>
                <div hidden="@TournamentIsFull">The current tournament has @SpacesLeft spaces left.</div>
            </div>

            <div hidden="@TournamentIsFull">
                <div hidden="@(!TournamentLoaded)">
                    <EditForm Model="@NewPlayer" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="card-body">
                            <div class="form-group mb-3">
                                <div class="row">
                                    <div class="col">
                                        <ValidationMessage For="@(() => NewPlayer.Name)" />
                                        <InputText class="form-control"
                                                   @bind-Value="NewPlayer.Name">
                                        </InputText>
                                    </div>
                                </div>
                            </div>
                            <button disabled="@TournamentIsFull" type="submit" class="btn btn-success">Register for tournament</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public bool RegisterDisabled { get; set; }
    [Parameter]
    public int SpacesLeft { get; set; }
    [Parameter]
    public bool TournamentIsFull { get; set; }
    [Parameter]
    public bool TournamentLoaded { get; set; }
    [Parameter]
    public Tournament CurrentTournament { get; set; }

    [Parameter]
    public Player NewPlayer { get; set; } = new();
    [Parameter]
    public EventCallback<Player> OnSave { get; set; }

    private void HandleValidSubmit()
    {
        OnSave.InvokeAsync(NewPlayer);
        NewPlayer = new();
    }
}
