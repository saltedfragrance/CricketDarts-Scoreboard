@if (ActiveGame.Players != null)
{
    var playerOne = ActiveGame.Players.ElementAt(0);
    var playerTwo = ActiveGame.Players.ElementAt(1);

    <div class="row text-light d-flex justify-content-center text-black">
        <h1>Scoreboard</h1>
        <h3>@playerOne.Name vs @playerTwo.Name</h3>
    </div>

    <div class="row row-cols-0  row-cols-lg-4  d-flex justify-content-center">
        <div class="container">
            <div class="row border-bottom ">
                <div class="col ">@playerOne.Name</div>
                <div class="col"></div>
                <div class="col">@playerTwo.Name</div>
            </div>
            @for (int i = 20; i > 13; i--)
            {
                int target = i;
                Guid? scoreBoardEntryPlayerOneId = ActiveGame.ScoreBoardEntries.Where(s => s.Target == i && s.PlayerId == playerOne.Id).FirstOrDefault().Id;
                Guid? scoreBoardEntryPlayerTwoId = ActiveGame.ScoreBoardEntries.Where(s => s.Target == i && s.PlayerId == playerTwo.Id).FirstOrDefault().Id;

                <div class="row">
                    <div class="col border-bottom">
                        <button class="btn btn-light" @onclick="e => UpdateScoreBoard.InvokeAsync(scoreBoardEntryPlayerOneId)">
                            @GetSymbol(target, playerOne.Id)
                        </button>
                    </div>
                    <div class="col border-start border-end">
                        @if (i == 14)
                        {
                            <span>Bull</span>
                        }
                        else
                        {
                            <span>@i</span>
                        }
                    </div>
                    <div class="col border-bottom">
                        <button class="btn btn-light" @onclick="e => UpdateScoreBoard.InvokeAsync(scoreBoardEntryPlayerTwoId)">
                            @GetSymbol(target, playerTwo.Id)
                        </button>
                    </div>
                </div>
            }
            <div>Current turn: @ActiveGame.Players.Where(p => p.HasTurn == true).FirstOrDefault().Name</div>
        </div>
    </div>
}


@code {
    [Parameter]
    public Game ActiveGame { get; set; }
    [Parameter]
    public EventCallback<Guid> UpdateScoreBoard { get; set; }

    private string GetSymbol(int target, Guid playerId)
    {
        var targetStatus = ActiveGame.ScoreBoardEntries.Where(s => s.PlayerId == playerId && s.Target == target).FirstOrDefault().Status;

        if (targetStatus == 0) return "";
        else if (targetStatus == 1) return "/";
        else if (targetStatus == 2) return "x";
        else return "⨂";
    }
}

