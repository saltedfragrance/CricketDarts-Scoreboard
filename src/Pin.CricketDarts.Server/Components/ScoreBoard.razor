@if (ActiveGame.Players != null)
{
    var playerOne = ActiveGame.Players.ElementAt(0);
    var playerTwo = ActiveGame.Players.ElementAt(1);
    int j;
    int i;

    <div class="row text-light d-flex justify-content-center text-black">
        <h1>Scoreboard</h1>
        <h3>@playerOne.Name vs @playerTwo.Name</h3>
    </div>

    <div class="row row-cols-0  row-cols-lg-4  d-flex justify-content-center">
        <div class="container">
            <div class="row border-bottom ">
                <div class="col ">@playerOne.Name</div>
                <div class="col"></div>
                <div class="col">@playerTwo.Name</div>
            </div>
            @for (i = 20, j = 20; i > 13; i--, j--)
            {
                int targetPlayerOne = i;
                int targetPlayerTwo = j;
                <div class="row">
                    <div class="col border-bottom">
                        <button disabled="@DisableInput(playerOne.Id)" class="btn btn-light" @onclick="e => UpdateScoreBoard.InvokeAsync(targetPlayerOne)">
                            @GetSymbol(i, playerOne.Id)
                        </button>
                    </div>
                    <div class="col border-start border-end">
                        @if (i == 14)
                        {
                            <span>Bull</span>
                        }
                        else
                        {
                            <span>@i</span>
                        }
                    </div>
                    <div class="col border-bottom">
                        <button disabled="@DisableInput(playerTwo.Id)" class="btn btn-light" @onclick="e => UpdateScoreBoard.InvokeAsync(targetPlayerTwo)">
                            @GetSymbol(j, playerTwo.Id)
                        </button>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col ">Current score: @playerOne.CurrentTotalScore</div>
                <div class="col"></div>
                <div class="col">Current score: @playerOne.CurrentTotalScore</div>
            </div>
            <div>Current turn: @ActiveGame.Players.Where(p => p.HasTurn == true).FirstOrDefault().Name</div>
            <div><button class="btn btn-light" @onclick="e => ToggleTurns.InvokeAsync()">New turn</button></div>
        </div>
    </div>
}


@code {
    [Parameter]
    public Game ActiveGame { get; set; }
    [Parameter]
    public Guid? CurrentTurnId { get; set; }
    [Parameter]
    public EventCallback<int> UpdateScoreBoard { get; set; }
    [Parameter]
    public EventCallback ToggleTurns { get; set; }

    private string GetSymbol(int target, Guid playerId)
    {
        var entry = ActiveGame.ScoreBoardEntries.Where(s => s.PlayerId == playerId && s.Target == target && s.GameId == ActiveGame.Id).FirstOrDefault();
        if (entry != null)
        {
            var targetStatus = entry.Status;

            if (targetStatus == 1) return "/";
            else if (targetStatus == 2) return "x";
            else return "⨂";
        }
        else return "";
    }

    private bool DisableInput(Guid playerId)
    {
        var player = ActiveGame.Players.Where(p => p.Id == playerId).FirstOrDefault();
        if (player.HasTurn == true) return false;
        else return true;
    }
}

