@page "/SelectedGame/{SelectedGameId:guid}"
@inject IGameService gameService;
@inject IScoreBoardEntryService scoreBoardEntryService;
@inject IPlayerService playerService;
@inject ITurnService turnService;

<PageTitle>Scoreboard</PageTitle>
<ScoreBoard ActiveGame="ActiveGame"
            UpdateScoreBoard="UpdateScoreBoard"
            CurrentTurnId="CurrentTurnId"
            ToggleTurns="ToggleTurns"></ScoreBoard>

@code{
    [Parameter]
    public Guid SelectedGameId { get; set; }
    [Parameter]
    public Guid? CurrentTurnId { get; set; }
    [Parameter]
    public Game ActiveGame { get; set; } = new();



    protected override async Task OnInitializedAsync()
    {
        await GetCurrentGame();
    }

    private async Task GetCurrentGame()
    {
        //game is zowiezo altijd aanwezig
        ActiveGame = (await gameService.GetGames()).Where(g => g.Id == SelectedGameId).FirstOrDefault();
        var playerOne = ActiveGame.Players.ElementAt(0);

        //als het een nieuwe game is, stel de beurt in
        if (ActiveGame.Players.All(p => !p.HasTurn))
        {
            playerOne.HasTurn = true;
            await playerService.UpdatePlayer(playerOne);
        }
        if (ActiveGame.CurrentTurnId == Guid.Empty)
        {
            var turn = await CreateNewTurn(playerOne.Id);
            CurrentTurnId = turn.Id;
            ActiveGame.CurrentTurnId = turn.Id;
            await gameService.UpdateGame(ActiveGame);
        }
        else CurrentTurnId = ActiveGame.CurrentTurnId;
    }
    private async Task UpdateScoreBoard(int target)
    {
        var entry = ActiveGame.ScoreBoardEntries.Where(s => s.Target == target
                                                        && s.GameId == ActiveGame.Id
                                                        && s.PlayerId == ActiveGame.Players.Where(p => p.HasTurn).FirstOrDefault().Id)
                                                        .FirstOrDefault();

        if (entry != null)
        {
            var status = entry.Status;
            var toUpdate = (await scoreBoardEntryService.GetScoreBoardEntries()).Where(s => s.Id == entry.Id).FirstOrDefault();

            if (toUpdate.TurnId == null) toUpdate.TurnId = CurrentTurnId;

            if (status == 1) toUpdate.Status = 2;
            else toUpdate.Status = 3;

            await scoreBoardEntryService.UpdateScoreBoardEntry(toUpdate);
        }
        else
        {
            var toAdd = new ScoreBoardEntry
            {
                GameId = ActiveGame.Id,
                Id = Guid.NewGuid(),
                PlayerId = ActiveGame.Players.Where(p => p.HasTurn).FirstOrDefault().Id,
                Status = 1,
                TurnId = CurrentTurnId,
                Target = target
            };
            await scoreBoardEntryService.CreateScoreBoardEntry(toAdd);
        }
        await GetCurrentGame();
        //await CalculateThrows();
    }

    private async Task<Turn> CreateNewTurn(Guid playerId)
    {
        var toAdd = new Turn
        {
            CurrentAmountOfThrows = 0,
            CurrentTotalScore = 0,
            Id = Guid.NewGuid(),
            PlayerId = playerId
        };
        await turnService.CreateTurn(toAdd);

        return toAdd;
    }

    private async Task ToggleTurns()
    {
        var playerHasNoTurn = ActiveGame.Players.Where(p => p.HasTurn).FirstOrDefault();
        var playerHasTurn = ActiveGame.Players.Where(p => !p.HasTurn).FirstOrDefault();
        playerHasTurn.HasTurn = true;
        playerHasNoTurn.HasTurn = false;

        var newTurn = await CreateNewTurn(playerHasTurn.Id);

        ActiveGame.CurrentTurnId = newTurn.Id;
        await gameService.UpdateGame(ActiveGame);
        await playerService.UpdatePlayer(playerHasTurn);
        await playerService.UpdatePlayer(playerHasNoTurn);
    }

    //private async Task CalculateThrows()
    //{
    //    var scoreBoardEntries = (await scoreBoardEntryService.GetScoreBoardEntries()).Where(s => s.PlayerId == ActiveGame.Players.Where(p => p.HasTurn).FirstOrDefault().Id
    //                                                                                  && s.TurnId == ActiveGame.CurrentTurnId).ToList();
    //    if(scoreBoardEntries.All(s => s.Status == 3) || 
    //       )
    //}
}
