@page "/SelectedGame/{SelectedGameId:guid}"
@inject IGameService gameService;
@inject IScoreBoardEntryService scoreBoardEntryService;
@inject IPlayerService PlayerService;

<PageTitle>Scoreboard</PageTitle>
<ScoreBoard ActiveGame="ActiveGame"
            UpdateScoreBoard="UpdateScoreBoard"></ScoreBoard>

@code{
    [Parameter]
    public Guid SelectedGameId { get; set; }
    [Parameter]
    public Game ActiveGame { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentGame();
        //await CreateScoreBoardEntries();
    }

    private async Task GetCurrentGame()
    {
        ActiveGame = (await gameService.GetGames()).Where(g => g.Id == SelectedGameId).FirstOrDefault();
        //indien nieuwe game, turn van 1 player op true zetten
        if (ActiveGame.Players.All(p => !p.HasTurn)) ActiveGame.Players.ElementAt(0).HasTurn = true;
        await PlayerService.UpdatePlayer(ActiveGame.Players.ElementAt(0));
    }
    private async Task UpdateScoreBoard(Guid id)
    {
        var status = ActiveGame.ScoreBoardEntries.Where(s => s.Id == id).FirstOrDefault().Status;

        var toUpdate = new ScoreBoardEntry
        {
            GameId = ActiveGame.Id,
            Id = id,
            PlayerId = ActiveGame.ScoreBoardEntries.Where(s => s.Id == id).FirstOrDefault().PlayerId,
            Target = ActiveGame.ScoreBoardEntries.Where(s => s.Id == id).FirstOrDefault().Target
        };

        if (status == 0) toUpdate.Status = 1;
        else if (status == 1) toUpdate.Status = 2;
        else toUpdate.Status = 3;

        await scoreBoardEntryService.UpdateScoreBoardEntry(toUpdate);
        await GetCurrentGame();
    }

    private async Task CreateScoreBoardEntries()
    {

        foreach (var player in ActiveGame.Players)
        {
            @for (int i = 20; i > 13; i--)
            {
                var scoreBoardEntries = await scoreBoardEntryService.GetScoreBoardEntries();
                var entry = scoreBoardEntries.Where(e => e.Target == i && e.PlayerId == player.Id).FirstOrDefault();

                if (entry == null)
                {
                    var newEntry = new ScoreBoardEntry
                    {
                        GameId = ActiveGame.Id,
                        Id = Guid.NewGuid(),
                        PlayerId = player.Id,
                        Status = 0,
                        Target = i
                    };

                    await scoreBoardEntryService.CreateScoreBoardEntry(newEntry);
                }
            }
        }
        await GetCurrentGame();
    }
}
