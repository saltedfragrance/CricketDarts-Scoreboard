@page "/SelectedGame/{SelectedGameId:guid}"
@inject IGameService gameService;
@inject IScoreBoardEntryService scoreBoardEntryService;
@inject IPlayerService playerService;
@inject ITurnService turnService;
@inject IStatisticsService statisticsService;
@inject NavigationManager navigationManager;

<PageTitle>Scoreboard</PageTitle>
<ScoreBoard ActiveGame="ActiveGame"
            UpdateScoreBoard="UpdateScoreBoard"
            CurrentPlayer="CurrentPlayer"
            ManualToggleTurns="ManualToggleTurns"
            UpdateDoublesTriples="UpdateDoublesTriples"
            @ref="scoreBoard"
            CurrentTurn="CurrentTurn"
            CancelSelection="CancelSelectionOfDoublesAndTriples"
            Winner="Winner"></ScoreBoard>

@code{
    [Parameter]
    public Guid SelectedGameId { get; set; }
    [Parameter]
    public Game ActiveGame { get; set; } = new();
    [Parameter]
    public Player CurrentPlayer { get; set; }
    [Parameter]
    public Turn CurrentTurn { get; set; }
    [Parameter]
    public Player Winner { get; set; }

    public ScoreBoard scoreBoard;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await RefreshCurrentGame();
    }

    private async Task RefreshCurrentGame()
    {
        //game is zowiezo altijd aanwezig, anders geen knop op de tournament pagina
        ActiveGame = (await gameService.GetGames()).Where(g => g.Id == SelectedGameId).FirstOrDefault();

        //als het een nieuwe game is, stel de beurt en turn in
        if (ActiveGame.CurrentTurnId == null)
        {
            if (ActiveGame.Players.All(p => !p.HasTurn))
            {
                CurrentPlayer = ActiveGame.Players.ElementAt(0);
                CurrentPlayer.HasTurn = true;
                await playerService.UpdatePlayer(CurrentPlayer);

                var turn = await CreateNewTurn(CurrentPlayer.Id);
                ActiveGame.CurrentTurnId = turn.Id;
                await gameService.UpdateGame(ActiveGame);
            }
        }

        //game refreshen
        CurrentTurn = (await turnService.GetTurns()).Where(t => t.Id == ActiveGame.CurrentTurnId).FirstOrDefault();
        CurrentPlayer = ActiveGame.Players.Where(p => p.Id == CurrentTurn.PlayerId).FirstOrDefault();

        //indien game stopgezet op triple of double selectiescherm, eerst dat doen
        if (CurrentTurn! != null)
        {
            if (ActiveGame.Players.All(p => p.HasTurn == false) && ActiveGame.CurrentTurnId != null && CurrentTurn.SelectionMode == true) await CheckForEarlyEnding();
        }

        await statisticsService.SendStatistics();
    }

    private async Task UpdateScoreBoard(int target)
    {
        //alle huidige worpen van de huidige turn
        var CurrentPlayerEntries = ActiveGame.ScoreBoardEntries.Where(s => s.PlayerId == CurrentPlayer.Id && s.TurnId == ActiveGame.CurrentTurnId).ToList();

        //vorige entry in vorige turn ophalen, indien aanwezig
        var previousEntryOfPreviousTurn = ActiveGame.ScoreBoardEntries.Where(s => s.Target == target
                                                && s.GameId == ActiveGame.Id
                                                && s.PlayerId == CurrentPlayer.Id).OrderBy(t => Math.Abs((DateTime.Now - t.DateAndTime).Ticks)).FirstOrDefault();

        //vorige entry in huidige turn ophalen, indien aanwezig
        var previousEntryOfCurrentTurn = ActiveGame.ScoreBoardEntries.Where(s => s.Target == target
                                            && s.GameId == ActiveGame.Id
                                            && s.TurnId == ActiveGame.CurrentTurnId
                                            && s.PlayerId == CurrentPlayer.Id).OrderBy(t => Math.Abs((DateTime.Now - t.DateAndTime).Ticks)).FirstOrDefault();


        //indien al een throw gedaan in huidige turn, entry ophalen
        var currentEntry = ActiveGame.ScoreBoardEntries.Where(s => s.Target == target
                                    && s.GameId == ActiveGame.Id
                                    && s.PlayerId == CurrentPlayer.Id
                                    && s.TurnId == ActiveGame.CurrentTurnId)
                                    .FirstOrDefault();

        //nieuwe entry, zonder score of status
        var toAdd = new ScoreBoardEntry
        {
            GameId = ActiveGame.Id,
            Id = Guid.NewGuid(),
            PlayerId = CurrentPlayer.Id,
            TurnId = ActiveGame.CurrentTurnId,
            Target = target,
            DateAndTime = DateTime.Now,
            AmountClicks = 1
        };

        //checken indien er een 4de target aangeworpen wordt
        if (CurrentPlayerEntries.Count() == 3 && currentEntry == null)
        {
            return;
        }
        //checken indien er meerdere targets geworpen zijn, het aantal worpen nog logisch is
        if (currentEntry != null)
        {
            if (CurrentPlayerEntries.Count == 2 && currentEntry.AmountClicks == 6)
            {
                return;
            }
            if (CurrentPlayerEntries.Count == 3 && currentEntry.AmountClicks == 3)
            {
                return;
            }
        }
        //checken indien er targets zijn met amountclicks > 3 => dan is er 1 target minder mogelijk aan te klikken
        if (CurrentPlayerEntries.Count() != 0)
        {
            if (CurrentPlayerEntries.Any(e => e.AmountClicks > 3) && CurrentPlayerEntries.Count == 2)
            {
                if (currentEntry == null) return;
            }
            if (CurrentPlayerEntries.Any(e => e.AmountClicks > 6) && CurrentPlayerEntries.Count == 1)
            {
                if (currentEntry == null) return;
            }
        }
        //checken indien de huidige worp de target zal volsmijten, en indien de opponent zijn target ook volgesmeten is, de worp niet mogelijk maken
        if (currentEntry != null)
        {
            var targetsFull = CheckForFullTargets(currentEntry);
            if (targetsFull) return;
        }
        if (toAdd != null && previousEntryOfPreviousTurn != null)
        {
            var targetsFull = CheckForFullTargets(previousEntryOfPreviousTurn);
            if (targetsFull) return;
        }

        //indien er nog geen throw gedaan is naar dat nummer in de huidige ronde, en ook geen in de vorige ronde (geen status, geen punten)
        if (currentEntry == null && previousEntryOfPreviousTurn == null)
        {
            toAdd.Status = 1;
            await scoreBoardEntryService.CreateScoreBoardEntry(toAdd);
        }
        //indien er nog geen throw gedaan is naar dat nummer in de huidige ronde, maar wel een in de vorige ronde (wel een status, misschien punten)
        else if (currentEntry == null && previousEntryOfPreviousTurn != null)
        {
            var previousEntryStatus = previousEntryOfPreviousTurn.Status;
            toAdd.Status = CalculateStatus(previousEntryOfPreviousTurn.Status);
            toAdd.Score = CalculatePoints(previousEntryOfPreviousTurn.Score, toAdd.Target, toAdd.Status, previousEntryStatus);
            await scoreBoardEntryService.CreateScoreBoardEntry(toAdd);
        }
        //indien er wel al een throw gedaan is in de huidige ronde (wel al een status, misschien punten)
        else
        {
            var previousEntryStatus = previousEntryOfCurrentTurn.Status;
            currentEntry.Status = CalculateStatus(currentEntry.Status);
            currentEntry.Score = CalculatePoints(currentEntry.Score, toAdd.Target, currentEntry.Status, previousEntryStatus);
            currentEntry.AmountClicks += 1;
            await scoreBoardEntryService.UpdateScoreBoardEntry(currentEntry);
        }

        //aantal throws updaten
        CurrentTurn.CurrentAmountOfThrows++;
        await turnService.UpdateTurn(CurrentTurn);
        await CheckForDefinitiveEnding();
        await UpdateScore();
        await CheckForWinner();
        await RefreshCurrentGame();
    }

    private bool CheckForFullTargets(ScoreBoardEntry entry)
    {
        var entryOfOpponent = ActiveGame.ScoreBoardEntries.Where(s => s.PlayerId != CurrentPlayer.Id).Where(s => s.Target == entry.Target).OrderBy(t => Math.Abs((DateTime.Now - t.DateAndTime).Ticks)).FirstOrDefault();
        if (entryOfOpponent != null)
        {
            if ((entry.Status + 1 == 4) && entryOfOpponent.Status == 3)
            {
                return true;
            }
        }
        return false;
    }

    private int CalculatePoints(int score, int target, int status, int previousStatus)
    {
        if (target != 14)
        {
            if (status == 3 && previousStatus == 3)
            {
                return score += target;
            }
            else return score;
        }
        else
        {
            if (score < ((25 * 3) * 3) && status == 3 && previousStatus == 3) return score += 25;
            else return score;
        }
    }

    private int CalculateStatus(int status)
    {
        if (status == 0) return 1;
        else if (status == 1) return 2;
        else return 3;
    }

    private async Task<Turn>
    CreateNewTurn(Guid playerId)
    {
        var toAdd = new Turn
        {
            CurrentAmountOfThrows = 0,
            CurrentTotalScore = 0,
            Id = Guid.NewGuid(),
            PlayerId = playerId
        };
        await turnService.CreateTurn(toAdd);

        return toAdd;
    }

    private async Task CheckForDefinitiveEnding()
    {
        //indien 3 triples gegooid altijd toggleturns want kan niet meer dan dit gooien
        if (CurrentTurn.CurrentAmountOfThrows == 9)
        {
            await UpdateStatistics(3);
            await AutomaticToggleTurns();
            await UpdateScore();
        }
    }

    private async Task CheckForWinner()
    {
        //checken op winnaar
        Player winner = null;
        int countOfTargets;
        foreach (var player in ActiveGame.Players)
        {
            var otherPlayer = ActiveGame.Players.Where(p => p.Id != player.Id).FirstOrDefault();
            countOfTargets = 0;
            var entries = (await scoreBoardEntryService.GetScoreBoardEntries()).Where(e => e.PlayerId == player.Id && e.GameId == ActiveGame.Id).Where(y => y.Status == 3)
                                                                               .Select(x => new { x.Target, x.Status }).Distinct().ToList();

            if (entries.Count() == 7 && entries.All(x => x.Status == 3) && player.CurrentTotalScore > otherPlayer.CurrentTotalScore)
            {
                ActiveGame.WinnerId = player.Id;
                ActiveGame.IsActive = false;
                Winner = player;
                await playerService.UpdatePlayer(player);
                await gameService.UpdateGame(ActiveGame);
                StateHasChanged();
                return;
            }
        }
    }

    private async Task UpdateScore()
    {
        //totale score updaten
        var scoreBoardEntries = (await scoreBoardEntryService.GetScoreBoardEntries()).Where(s => s.PlayerId == CurrentPlayer.Id && s.GameId == ActiveGame.Id).ToList();
        CurrentPlayer.CurrentTotalScore = scoreBoardEntries.Sum(s => s.Score);
        await playerService.UpdatePlayer(CurrentPlayer);
        await RefreshCurrentGame();
    }

    private async Task UpdateStatistics(int triples = 0, int doubles = 0)
    {
        if (triples != 0)
        {
            CurrentPlayer.Triples += triples;
            await playerService.UpdatePlayer(CurrentPlayer);
        }
        if (doubles != 0)
        {
            CurrentPlayer.Doubles += doubles;
            await playerService.UpdatePlayer(CurrentPlayer);
        }
    }

    private async Task AutomaticToggleTurns()
    {
        Player otherPlayer = null;
        if (ActiveGame.Players.Any(p => p.HasTurn == true))
        {
            otherPlayer = ActiveGame.Players.Where(p => !p.HasTurn).FirstOrDefault();
        }
        else
        {
            otherPlayer = ActiveGame.Players.Where(p => p.Id != CurrentTurn.PlayerId).FirstOrDefault();
        }

        otherPlayer.HasTurn = true;
        CurrentPlayer.HasTurn = false;

        //nieuwe turn maken
        var newTurn = await CreateNewTurn(otherPlayer.Id);
        ActiveGame.CurrentTurnId = newTurn.Id;

        await playerService.UpdatePlayer(otherPlayer);
        await playerService.UpdatePlayer(CurrentPlayer);
        await gameService.UpdateGame(ActiveGame);
        await RefreshCurrentGame();
        await UpdateScore();
        StateHasChanged();
    }

    private async Task ManualToggleTurns()
    {
        //indien vroegtijdig op knop toggleturns geklikt: check hoeveel doubles en triples gegooid
        CheckForEarlyEnding();
    }

    private async Task CheckForEarlyEnding()
    {
        CurrentTurn.SelectionMode = true;
        await turnService.UpdateTurn(CurrentTurn);
        var amountOfThrows = CurrentTurn.CurrentAmountOfThrows;

        //kan maar 2 triples en een double zijn
        if (amountOfThrows == 8)
        {
            UpdateStatistics(2, 1);
            AutomaticToggleTurns();
            return;
        }
        //kan maar 2 triples zijn
        if (amountOfThrows == 7)
        {
            UpdateStatistics(2);
            AutomaticToggleTurns();
            return;
        }
        if (amountOfThrows == 0)
        {
            CurrentTurn.SelectionMode = false;
            AutomaticToggleTurns();
            return;
        }

        //beurt van currentplayer op false zetten, om input te disablen
        CurrentPlayer.HasTurn = false;
        await playerService.UpdatePlayer(CurrentPlayer);

        //triples of doubles selecteren
        await scoreBoard.SelectThrows(amountOfThrows);
    }

    private async Task UpdateDoublesTriples(Dictionary<string, int>
        values)
    {
        //waarden updaten
        var triples = values.Where(v => v.Key == "Triples").FirstOrDefault().Value;
        var doubles = values.Where(v => v.Key == "Doubles").FirstOrDefault().Value;

        if (triples > 0) CurrentPlayer.Triples += triples;
        if (doubles > 0) CurrentPlayer.Doubles += doubles;

        //beurt togglen
        CurrentTurn.SelectionMode = false;
        await AutomaticToggleTurns();
    }

    private async Task CancelSelectionOfDoublesAndTriples()
    {
        CurrentTurn.SelectionMode = true;
        await turnService.UpdateTurn(CurrentTurn);
        await AutomaticToggleTurns();
    }
}
