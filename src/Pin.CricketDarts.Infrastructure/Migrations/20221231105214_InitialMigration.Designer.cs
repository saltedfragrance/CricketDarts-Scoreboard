// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.CricketDarts.Infrastructure.Data;

#nullable disable

namespace Pin.CricketDarts.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221231105214_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentTurnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78eb258a-eff6-4613-b4de-56410071ffb9"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("95adddc1-90c7-4f23-8627-79a405469ac4")
                        },
                        new
                        {
                            Id = new Guid("604d7cda-53ff-44b7-b488-0a721cd08f12"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("0948da66-68d7-4c84-b4ba-a5cf29485a69")
                        },
                        new
                        {
                            Id = new Guid("efa3002a-7845-4d4d-875d-56ea63fc3916"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("216ff991-0c8f-488a-830b-3158e3185ee9")
                        },
                        new
                        {
                            Id = new Guid("5966d61e-c2f8-47c3-9fd9-b8c086fd7dd2"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("86b5a624-8435-4ffb-9eba-2a5a95445e6e")
                        },
                        new
                        {
                            Id = new Guid("be450d01-a216-4bd1-be2c-7e07f1e8bfe9"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("a3777259-7f5d-4e4b-807d-9896355a23e5")
                        },
                        new
                        {
                            Id = new Guid("d866da0b-8660-4d3b-aa7c-6401ee71028d"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Doubles")
                        .HasColumnType("int");

                    b.Property<bool>("HasTurn")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPointsScored")
                        .HasColumnType("int");

                    b.Property<int>("Triples")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95adddc1-90c7-4f23-8627-79a405469ac4"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "VincentVega",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("0948da66-68d7-4c84-b4ba-a5cf29485a69"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "BruceWillis",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("216ff991-0c8f-488a-830b-3158e3185ee9"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Fabienne",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("86b5a624-8435-4ffb-9eba-2a5a95445e6e"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Butch",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("a3777259-7f5d-4e4b-807d-9896355a23e5"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "JohnTravolta",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("2c5753ab-656c-47a3-89b0-08a90a087f5c"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "TheWolf",
                            TotalPointsScored = 0,
                            Triples = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGames");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("d866da0b-8660-4d3b-aa7c-6401ee71028d"),
                            PlayerId = new Guid("95adddc1-90c7-4f23-8627-79a405469ac4")
                        },
                        new
                        {
                            GameId = new Guid("d866da0b-8660-4d3b-aa7c-6401ee71028d"),
                            PlayerId = new Guid("0948da66-68d7-4c84-b4ba-a5cf29485a69")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<Guid>("TurnId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TurnId");

                    b.ToTable("ScoreBoardEntries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9efc7505-a3d6-4222-8ccc-83f7a43ef10d"),
                            GameId = new Guid("d866da0b-8660-4d3b-aa7c-6401ee71028d"),
                            PlayerId = new Guid("95adddc1-90c7-4f23-8627-79a405469ac4"),
                            Status = 3,
                            Target = 16,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("c0958e1e-a9e9-431d-a00f-5b74670c646c"),
                            GameId = new Guid("d866da0b-8660-4d3b-aa7c-6401ee71028d"),
                            PlayerId = new Guid("95adddc1-90c7-4f23-8627-79a405469ac4"),
                            Status = 1,
                            Target = 15,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("68f7110b-edf6-4b3e-b052-af9016243eef"),
                            GameId = new Guid("d866da0b-8660-4d3b-aa7c-6401ee71028d"),
                            PlayerId = new Guid("95adddc1-90c7-4f23-8627-79a405469ac4"),
                            Status = 2,
                            Target = 17,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOngoing")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            IsOngoing = false
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentAmountOfThrows")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointsScored")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Turns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59"),
                            CurrentAmountOfThrows = 3,
                            PlayerId = new Guid("95adddc1-90c7-4f23-8627-79a405469ac4"),
                            PointsScored = 0
                        },
                        new
                        {
                            Id = new Guid("3226b169-0211-4235-9afd-869b8b79c05e"),
                            CurrentAmountOfThrows = 0,
                            PlayerId = new Guid("0948da66-68d7-4c84-b4ba-a5cf29485a69"),
                            PointsScored = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Tournament", "Tournament")
                        .WithMany("Games")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("PlayerGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany("PlayerGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("ScoreBoard")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Turn", "Turn")
                        .WithMany("ScoreBoardEntries")
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Navigation("PlayerGames");

                    b.Navigation("ScoreBoard");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Navigation("PlayerGames");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Navigation("ScoreBoardEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
