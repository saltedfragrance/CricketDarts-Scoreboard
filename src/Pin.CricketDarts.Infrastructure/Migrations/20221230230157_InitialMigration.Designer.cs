// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.CricketDarts.Infrastructure.Data;

#nullable disable

namespace Pin.CricketDarts.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221230230157_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d1c0da4-2df9-4d08-b6f9-0ce74b225545"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("91e4d9c4-ceb6-4259-ace1-9b24f57c704d")
                        },
                        new
                        {
                            Id = new Guid("1aed4333-70c5-42e3-9e4c-dfa15e09a52f"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("642ba299-2a35-479f-b6df-3e3f893820cb")
                        },
                        new
                        {
                            Id = new Guid("1b706538-3251-4494-b690-ccfbb1fae3b6"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("279d330d-b4ed-4a8d-876a-09ed8e708cef")
                        },
                        new
                        {
                            Id = new Guid("da70b0a1-d0e8-45df-9af0-2fe0fdcc45dc"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("2f5ae907-4d60-4eaf-9140-55e22759c124")
                        },
                        new
                        {
                            Id = new Guid("22b1c4ae-e451-4b63-9c5b-7885d83ae516"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("446a8e92-ca2a-4721-b8ec-d3ab4dd1b516")
                        },
                        new
                        {
                            Id = new Guid("71c86e97-54a8-454d-a448-ff5727be2568"),
                            IsActive = true,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentAmountOfThrows")
                        .HasColumnType("int");

                    b.Property<int>("PointsScored")
                        .HasColumnType("int");

                    b.Property<int>("Doubles")
                        .HasColumnType("int");

                    b.Property<bool>("HasTurn")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Triples")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91e4d9c4-ceb6-4259-ace1-9b24f57c704d"),
                            CurrentAmountOfThrows = 0,
                            CurrentTotalScore = 0,
                            Doubles = 0,
                            HasTurn = false,
                            Name = "VincentVega",
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("642ba299-2a35-479f-b6df-3e3f893820cb"),
                            CurrentAmountOfThrows = 0,
                            CurrentTotalScore = 0,
                            Doubles = 0,
                            HasTurn = false,
                            Name = "BruceWillis",
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("279d330d-b4ed-4a8d-876a-09ed8e708cef"),
                            CurrentAmountOfThrows = 0,
                            CurrentTotalScore = 0,
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Fabienne",
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("2f5ae907-4d60-4eaf-9140-55e22759c124"),
                            CurrentAmountOfThrows = 0,
                            CurrentTotalScore = 0,
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Butch",
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("446a8e92-ca2a-4721-b8ec-d3ab4dd1b516"),
                            CurrentAmountOfThrows = 0,
                            CurrentTotalScore = 0,
                            Doubles = 0,
                            HasTurn = false,
                            Name = "JohnTravolta",
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("d74a7203-626b-4e84-9366-b0f4812b3925"),
                            CurrentAmountOfThrows = 0,
                            CurrentTotalScore = 0,
                            Doubles = 0,
                            HasTurn = false,
                            Name = "TheWolf",
                            Triples = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGames");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("71c86e97-54a8-454d-a448-ff5727be2568"),
                            PlayerId = new Guid("91e4d9c4-ceb6-4259-ace1-9b24f57c704d")
                        },
                        new
                        {
                            GameId = new Guid("71c86e97-54a8-454d-a448-ff5727be2568"),
                            PlayerId = new Guid("642ba299-2a35-479f-b6df-3e3f893820cb")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ScoreBoardEntries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b11e093-7d4e-4539-97bc-598538e485d2"),
                            GameId = new Guid("71c86e97-54a8-454d-a448-ff5727be2568"),
                            PlayerId = new Guid("91e4d9c4-ceb6-4259-ace1-9b24f57c704d"),
                            Status = 3,
                            Target = 16
                        },
                        new
                        {
                            Id = new Guid("48aa24cd-f770-4dbd-a0d7-6bc5df1795a9"),
                            GameId = new Guid("71c86e97-54a8-454d-a448-ff5727be2568"),
                            PlayerId = new Guid("91e4d9c4-ceb6-4259-ace1-9b24f57c704d"),
                            Status = 1,
                            Target = 15
                        },
                        new
                        {
                            Id = new Guid("4744ca4a-eafa-43f3-ad7b-06b6ff02b6f0"),
                            GameId = new Guid("71c86e97-54a8-454d-a448-ff5727be2568"),
                            PlayerId = new Guid("642ba299-2a35-479f-b6df-3e3f893820cb"),
                            Status = 2,
                            Target = 17
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOngoing")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            IsOngoing = false
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Tournament", "Tournament")
                        .WithMany("Games")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("PlayerGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany("PlayerGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("ScoreBoard")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Navigation("PlayerGames");

                    b.Navigation("ScoreBoard");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Navigation("PlayerGames");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
