// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.CricketDarts.Infrastructure.Data;

#nullable disable

namespace Pin.CricketDarts.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentTurnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ba153a0-bad6-4abe-8bd3-f11a8e11f61a"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("34e7b3bc-8c34-4654-90ca-4db4fac882f8")
                        },
                        new
                        {
                            Id = new Guid("c20eccc3-3c59-4767-98da-b4880fef97c8"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("7342bfea-01ed-4f96-b26b-c5eee5898730")
                        },
                        new
                        {
                            Id = new Guid("4c69d921-bc5e-432d-9d93-b08bdacd5d9c"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("15baa86c-a666-4e53-a4bb-d05e86e487e6")
                        },
                        new
                        {
                            Id = new Guid("77c63634-324d-4450-a266-f94e8ac8332e"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("ddb00b6a-5523-45e9-8958-03533660e95c")
                        },
                        new
                        {
                            Id = new Guid("61906e7b-99aa-4831-8eae-cc47593f6d15"),
                            CurrentTurnId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("ac52bd0f-c648-4ff6-9dff-fb140f86b34d")
                        },
                        new
                        {
                            Id = new Guid("e5382e8c-310e-490c-bd9b-47c07da33dd8"),
                            CurrentTurnId = new Guid("3226b169-0211-4235-9afd-869b8b79c05e"),
                            IsActive = true,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Doubles")
                        .HasColumnType("int");

                    b.Property<bool>("HasTurn")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPointsScored")
                        .HasColumnType("int");

                    b.Property<int>("Triples")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34e7b3bc-8c34-4654-90ca-4db4fac882f8"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "VincentVega",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("7342bfea-01ed-4f96-b26b-c5eee5898730"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "BruceWillis",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("15baa86c-a666-4e53-a4bb-d05e86e487e6"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Fabienne",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("ddb00b6a-5523-45e9-8958-03533660e95c"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Butch",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("ac52bd0f-c648-4ff6-9dff-fb140f86b34d"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "JohnTravolta",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("ae710b0f-3ffc-4dff-8d3f-d24b8853097a"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "TheWolf",
                            TotalPointsScored = 0,
                            Triples = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGames");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("e5382e8c-310e-490c-bd9b-47c07da33dd8"),
                            PlayerId = new Guid("34e7b3bc-8c34-4654-90ca-4db4fac882f8")
                        },
                        new
                        {
                            GameId = new Guid("e5382e8c-310e-490c-bd9b-47c07da33dd8"),
                            PlayerId = new Guid("7342bfea-01ed-4f96-b26b-c5eee5898730")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<Guid?>("TurnId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TurnId");

                    b.ToTable("ScoreBoardEntries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f73190c-f565-451c-81ad-9d90c716cfe3"),
                            GameId = new Guid("e5382e8c-310e-490c-bd9b-47c07da33dd8"),
                            PlayerId = new Guid("34e7b3bc-8c34-4654-90ca-4db4fac882f8"),
                            Status = 3,
                            Target = 16,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("dcf56a0d-6bc7-421c-a85e-9f7df5d0fe17"),
                            GameId = new Guid("e5382e8c-310e-490c-bd9b-47c07da33dd8"),
                            PlayerId = new Guid("34e7b3bc-8c34-4654-90ca-4db4fac882f8"),
                            Status = 1,
                            Target = 15,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("126b54da-7e80-486e-ab37-aac0ab237911"),
                            GameId = new Guid("e5382e8c-310e-490c-bd9b-47c07da33dd8"),
                            PlayerId = new Guid("34e7b3bc-8c34-4654-90ca-4db4fac882f8"),
                            Status = 2,
                            Target = 17,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOngoing")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            IsOngoing = false
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentAmountOfThrows")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointsScored")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Turns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59"),
                            CurrentAmountOfThrows = 3,
                            PlayerId = new Guid("34e7b3bc-8c34-4654-90ca-4db4fac882f8"),
                            PointsScored = 0
                        },
                        new
                        {
                            Id = new Guid("3226b169-0211-4235-9afd-869b8b79c05e"),
                            CurrentAmountOfThrows = 0,
                            PlayerId = new Guid("7342bfea-01ed-4f96-b26b-c5eee5898730"),
                            PointsScored = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Tournament", "Tournament")
                        .WithMany("Games")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("PlayerGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany("PlayerGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("ScoreBoard")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Turn", "Turn")
                        .WithMany("ScoreBoardEntries")
                        .HasForeignKey("TurnId");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Navigation("PlayerGames");

                    b.Navigation("ScoreBoard");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Navigation("PlayerGames");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Navigation("ScoreBoardEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
