// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.CricketDarts.Infrastructure.Data;

#nullable disable

namespace Pin.CricketDarts.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentTurnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7faefea5-d263-45af-a0ab-dfc379fa386b"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("d9077c70-af22-4ab6-a788-6ad4067dd07a")
                        },
                        new
                        {
                            Id = new Guid("e3b6fa53-4b51-4ea6-8e02-06d502ec28cb"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("4e13cef7-73c6-4cd0-944c-1ab5865e8358")
                        },
                        new
                        {
                            Id = new Guid("c8c6c8ef-be6e-4d88-9980-3a286996d677"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("e39c5d9e-3d00-4685-9805-0325ba0e10ef")
                        },
                        new
                        {
                            Id = new Guid("27ca0b5d-738d-43c0-8056-b686b5ebf8c3"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("c6116561-451e-4aa6-8376-4013e8521a2d")
                        },
                        new
                        {
                            Id = new Guid("f6a5ea06-7022-4ebb-ad76-e679a9a7107c"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("10df819b-0c35-4fc8-b006-6af0b25daf28")
                        },
                        new
                        {
                            Id = new Guid("2516a21c-0813-410b-814b-8ccf5d6fd58b"),
                            CurrentTurnId = new Guid("3226b169-0211-4235-9afd-869b8b79c05e"),
                            IsActive = true,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Doubles")
                        .HasColumnType("int");

                    b.Property<bool>("HasTurn")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPointsScored")
                        .HasColumnType("int");

                    b.Property<int>("Triples")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9077c70-af22-4ab6-a788-6ad4067dd07a"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "VincentVega",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("4e13cef7-73c6-4cd0-944c-1ab5865e8358"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "BruceWillis",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("e39c5d9e-3d00-4685-9805-0325ba0e10ef"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Fabienne",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("c6116561-451e-4aa6-8376-4013e8521a2d"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Butch",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("10df819b-0c35-4fc8-b006-6af0b25daf28"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "JohnTravolta",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("50f82646-0285-4f74-b952-7adabce36c16"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "TheWolf",
                            TotalPointsScored = 0,
                            Triples = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGames");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("2516a21c-0813-410b-814b-8ccf5d6fd58b"),
                            PlayerId = new Guid("d9077c70-af22-4ab6-a788-6ad4067dd07a")
                        },
                        new
                        {
                            GameId = new Guid("2516a21c-0813-410b-814b-8ccf5d6fd58b"),
                            PlayerId = new Guid("4e13cef7-73c6-4cd0-944c-1ab5865e8358")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<Guid?>("TurnId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TurnId");

                    b.ToTable("ScoreBoardEntries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41b1e8b1-1a58-4a30-8ecc-9f296800d616"),
                            GameId = new Guid("2516a21c-0813-410b-814b-8ccf5d6fd58b"),
                            PlayerId = new Guid("d9077c70-af22-4ab6-a788-6ad4067dd07a"),
                            Score = 0,
                            Status = 3,
                            Target = 16,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("0daec266-6389-444c-8313-382edb2113dc"),
                            GameId = new Guid("2516a21c-0813-410b-814b-8ccf5d6fd58b"),
                            PlayerId = new Guid("d9077c70-af22-4ab6-a788-6ad4067dd07a"),
                            Score = 0,
                            Status = 1,
                            Target = 15,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("20e0e962-a298-4e26-84a9-9c313dc08cad"),
                            GameId = new Guid("2516a21c-0813-410b-814b-8ccf5d6fd58b"),
                            PlayerId = new Guid("d9077c70-af22-4ab6-a788-6ad4067dd07a"),
                            Score = 0,
                            Status = 2,
                            Target = 17,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOngoing")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            IsOngoing = false
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentAmountOfThrows")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointsScored")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Turns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59"),
                            CurrentAmountOfThrows = 3,
                            PlayerId = new Guid("d9077c70-af22-4ab6-a788-6ad4067dd07a"),
                            PointsScored = 0
                        },
                        new
                        {
                            Id = new Guid("3226b169-0211-4235-9afd-869b8b79c05e"),
                            CurrentAmountOfThrows = 0,
                            PlayerId = new Guid("4e13cef7-73c6-4cd0-944c-1ab5865e8358"),
                            PointsScored = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Tournament", "Tournament")
                        .WithMany("Games")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("PlayerGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany("PlayerGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("ScoreBoard")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Turn", "Turn")
                        .WithMany("ScoreBoardEntries")
                        .HasForeignKey("TurnId");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Navigation("PlayerGames");

                    b.Navigation("ScoreBoard");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Navigation("PlayerGames");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Navigation("ScoreBoardEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
