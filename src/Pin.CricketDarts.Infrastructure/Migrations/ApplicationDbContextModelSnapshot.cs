// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.CricketDarts.Infrastructure.Data;

#nullable disable

namespace Pin.CricketDarts.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentTurnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fe20014-df1c-4ef1-9ad3-a79b752020ac"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("628048f6-d745-4dc5-a748-21dd95104285")
                        },
                        new
                        {
                            Id = new Guid("09b11b52-bf19-454d-80ad-1867d6e548c7"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("4c017cd3-956c-42e2-a379-0af5680bced7")
                        },
                        new
                        {
                            Id = new Guid("a29ee8cc-c0b7-4864-af56-69591250e192"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("bddf7617-8a8e-4bac-b831-d3c74d27257e")
                        },
                        new
                        {
                            Id = new Guid("35a75e98-e0c8-4969-b276-c39a805d666e"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("5365d84f-7cbd-4f4b-ba4b-87f16e30d701")
                        },
                        new
                        {
                            Id = new Guid("98c8246c-c2c7-4b58-a5ad-de32cd13a8a3"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("434f3335-dcd8-4b9f-aa61-320c0a1fc7ad")
                        },
                        new
                        {
                            Id = new Guid("e8f63df7-2bcb-48e2-9c32-294785a9a7d5"),
                            CurrentTurnId = new Guid("3226b169-0211-4235-9afd-869b8b79c05e"),
                            IsActive = true,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Doubles")
                        .HasColumnType("int");

                    b.Property<bool>("HasTurn")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPointsScored")
                        .HasColumnType("int");

                    b.Property<int>("Triples")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("628048f6-d745-4dc5-a748-21dd95104285"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "VincentVega",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("4c017cd3-956c-42e2-a379-0af5680bced7"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "BruceWillis",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("bddf7617-8a8e-4bac-b831-d3c74d27257e"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Fabienne",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("5365d84f-7cbd-4f4b-ba4b-87f16e30d701"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Butch",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("434f3335-dcd8-4b9f-aa61-320c0a1fc7ad"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "JohnTravolta",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("5bd7e63b-1d2e-44b7-95e5-220f1070f2a4"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "TheWolf",
                            TotalPointsScored = 0,
                            Triples = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGames");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("e8f63df7-2bcb-48e2-9c32-294785a9a7d5"),
                            PlayerId = new Guid("628048f6-d745-4dc5-a748-21dd95104285")
                        },
                        new
                        {
                            GameId = new Guid("e8f63df7-2bcb-48e2-9c32-294785a9a7d5"),
                            PlayerId = new Guid("4c017cd3-956c-42e2-a379-0af5680bced7")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<Guid?>("TurnId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TurnId");

                    b.ToTable("ScoreBoardEntries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("564c4145-4253-43ae-8cd4-978d2a7c26a6"),
                            DateAndTime = new DateTime(2023, 1, 5, 22, 38, 35, 343, DateTimeKind.Local).AddTicks(3098),
                            GameId = new Guid("e8f63df7-2bcb-48e2-9c32-294785a9a7d5"),
                            PlayerId = new Guid("628048f6-d745-4dc5-a748-21dd95104285"),
                            Score = 0,
                            Status = 3,
                            Target = 16,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("475e0624-9216-47f4-9519-7b84e1c3bd63"),
                            DateAndTime = new DateTime(2023, 1, 3, 22, 38, 35, 343, DateTimeKind.Local).AddTicks(3126),
                            GameId = new Guid("e8f63df7-2bcb-48e2-9c32-294785a9a7d5"),
                            PlayerId = new Guid("628048f6-d745-4dc5-a748-21dd95104285"),
                            Score = 0,
                            Status = 1,
                            Target = 15,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("d0ea75f0-4492-4c29-94c9-736ee6dafdf1"),
                            DateAndTime = new DateTime(2023, 1, 4, 22, 38, 35, 343, DateTimeKind.Local).AddTicks(3130),
                            GameId = new Guid("e8f63df7-2bcb-48e2-9c32-294785a9a7d5"),
                            PlayerId = new Guid("628048f6-d745-4dc5-a748-21dd95104285"),
                            Score = 0,
                            Status = 2,
                            Target = 17,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOngoing")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            IsOngoing = false
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentAmountOfThrows")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointsScored")
                        .HasColumnType("int");

                    b.Property<bool>("SelectionMode")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Turns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59"),
                            CurrentAmountOfThrows = 3,
                            PlayerId = new Guid("628048f6-d745-4dc5-a748-21dd95104285"),
                            PointsScored = 0,
                            SelectionMode = false
                        },
                        new
                        {
                            Id = new Guid("3226b169-0211-4235-9afd-869b8b79c05e"),
                            CurrentAmountOfThrows = 0,
                            PlayerId = new Guid("4c017cd3-956c-42e2-a379-0af5680bced7"),
                            PointsScored = 0,
                            SelectionMode = false
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Tournament", "Tournament")
                        .WithMany("Games")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("PlayerGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany("PlayerGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("ScoreBoard")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Turn", "Turn")
                        .WithMany("ScoreBoardEntries")
                        .HasForeignKey("TurnId");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Navigation("PlayerGames");

                    b.Navigation("ScoreBoard");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Navigation("PlayerGames");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Navigation("ScoreBoardEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
