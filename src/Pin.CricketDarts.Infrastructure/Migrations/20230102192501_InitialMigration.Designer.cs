// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.CricketDarts.Infrastructure.Data;

#nullable disable

namespace Pin.CricketDarts.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230102192501_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentTurnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88cb8c70-ae39-445a-bf6f-30e4c01f9540"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("db60af73-4e20-4ed5-b56c-736cc1fc0f7a")
                        },
                        new
                        {
                            Id = new Guid("e89d2326-1cdc-4f58-8966-c740c527efbd"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("db1e7836-d552-40ea-8fb2-e7360601f8d1")
                        },
                        new
                        {
                            Id = new Guid("30c13176-e8ac-413f-a164-9467aad80e28"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("76db3852-c7c2-4b56-9217-1f9be8de52bf")
                        },
                        new
                        {
                            Id = new Guid("a064fad5-2d83-4d51-908a-3b809886571b"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("a83ffedd-16f0-44aa-8809-2de04ab3838a")
                        },
                        new
                        {
                            Id = new Guid("fd2efb9d-8d9d-4692-b2b9-71d553e36fdf"),
                            IsActive = false,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("10e94ab2-34ca-456f-90ca-6c97ae71d943")
                        },
                        new
                        {
                            Id = new Guid("41472e98-194e-4ffc-90f6-61bac0de8c2e"),
                            CurrentTurnId = new Guid("3226b169-0211-4235-9afd-869b8b79c05e"),
                            IsActive = true,
                            TournamentId = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            WinnerId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Doubles")
                        .HasColumnType("int");

                    b.Property<bool>("HasTurn")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPointsScored")
                        .HasColumnType("int");

                    b.Property<int>("Triples")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db60af73-4e20-4ed5-b56c-736cc1fc0f7a"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "VincentVega",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("db1e7836-d552-40ea-8fb2-e7360601f8d1"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "BruceWillis",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("76db3852-c7c2-4b56-9217-1f9be8de52bf"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Fabienne",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("a83ffedd-16f0-44aa-8809-2de04ab3838a"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "Butch",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("10e94ab2-34ca-456f-90ca-6c97ae71d943"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "JohnTravolta",
                            TotalPointsScored = 0,
                            Triples = 0
                        },
                        new
                        {
                            Id = new Guid("c99067d1-c494-4e0a-aea3-3906c4f91ff8"),
                            Doubles = 0,
                            HasTurn = false,
                            Name = "TheWolf",
                            TotalPointsScored = 0,
                            Triples = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGames");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("41472e98-194e-4ffc-90f6-61bac0de8c2e"),
                            PlayerId = new Guid("db60af73-4e20-4ed5-b56c-736cc1fc0f7a")
                        },
                        new
                        {
                            GameId = new Guid("41472e98-194e-4ffc-90f6-61bac0de8c2e"),
                            PlayerId = new Guid("db1e7836-d552-40ea-8fb2-e7360601f8d1")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<Guid?>("TurnId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TurnId");

                    b.ToTable("ScoreBoardEntries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f59bb65e-d953-4340-8b84-9d5d88a990da"),
                            DateAndTime = new DateTime(2023, 1, 4, 20, 25, 1, 641, DateTimeKind.Local).AddTicks(8495),
                            GameId = new Guid("41472e98-194e-4ffc-90f6-61bac0de8c2e"),
                            PlayerId = new Guid("db60af73-4e20-4ed5-b56c-736cc1fc0f7a"),
                            Score = 0,
                            Status = 3,
                            Target = 16,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("bf2e7060-19da-473b-8bd4-bd57911c7d5e"),
                            DateAndTime = new DateTime(2023, 1, 2, 20, 25, 1, 641, DateTimeKind.Local).AddTicks(8525),
                            GameId = new Guid("41472e98-194e-4ffc-90f6-61bac0de8c2e"),
                            PlayerId = new Guid("db60af73-4e20-4ed5-b56c-736cc1fc0f7a"),
                            Score = 0,
                            Status = 1,
                            Target = 15,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        },
                        new
                        {
                            Id = new Guid("bfaa3cae-2c71-4822-95e1-d53344839d70"),
                            DateAndTime = new DateTime(2023, 1, 3, 20, 25, 1, 641, DateTimeKind.Local).AddTicks(8566),
                            GameId = new Guid("41472e98-194e-4ffc-90f6-61bac0de8c2e"),
                            PlayerId = new Guid("db60af73-4e20-4ed5-b56c-736cc1fc0f7a"),
                            Score = 0,
                            Status = 2,
                            Target = 17,
                            TurnId = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59")
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOngoing")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("243407c9-d7e6-4192-a465-71076a592bf9"),
                            IsOngoing = false
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentAmountOfThrows")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointsScored")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Turns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ba0a3b1-932b-41b3-bc2b-82d720687b59"),
                            CurrentAmountOfThrows = 3,
                            PlayerId = new Guid("db60af73-4e20-4ed5-b56c-736cc1fc0f7a"),
                            PointsScored = 0
                        },
                        new
                        {
                            Id = new Guid("3226b169-0211-4235-9afd-869b8b79c05e"),
                            CurrentAmountOfThrows = 0,
                            PlayerId = new Guid("db1e7836-d552-40ea-8fb2-e7360601f8d1"),
                            PointsScored = 0
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Tournament", "Tournament")
                        .WithMany("Games")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerGames", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("PlayerGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany("PlayerGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.ScoreBoardEntry", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Game", "Game")
                        .WithMany("ScoreBoard")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Turn", "Turn")
                        .WithMany("ScoreBoardEntries")
                        .HasForeignKey("TurnId");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Game", b =>
                {
                    b.Navigation("PlayerGames");

                    b.Navigation("ScoreBoard");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Navigation("PlayerGames");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Turn", b =>
                {
                    b.Navigation("ScoreBoardEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
